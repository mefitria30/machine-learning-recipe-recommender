import pandas as pd
import numpy as np
import random
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.cluster import KMeans

# Load dataset
data = pd.read_csv('dataset.csv')

# Rename columns
data.rename(columns={'Unnamed: 0': 'id', 'Title': 'name', 'Ingredients': 'ingredients',
                     'Instructions': 'steps', 'Image_Name': 'image'}, inplace=True)

# Pilih kolom yang relevan
new_data = data[['id', 'name', 'ingredients', 'steps', 'image']]

# Tambahkan kolom rating dengan nilai random antara 1-5
new_data['rating'] = [random.randint(1, 5) for _ in range(len(new_data))]

# Konversi ingredients ke fitur numerik menggunakan TF-IDF
tfidf = TfidfVectorizer(stop_words='english')
X_ingredients = tfidf.fit_transform(new_data['ingredients'].values.astype('U'))

# **Gunakan K-Means untuk membentuk kategori awal secara otomatis**
num_clusters = 5  # Tentukan jumlah kategori makanan/minuman
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
new_data['category'] = kmeans.fit_predict(X_ingredients)

# **Gunakan Naïve Bayes untuk memprediksi kategori**
model_category = MultinomialNB()
model_category.fit(X_ingredients, new_data['category'])  # Latih model dengan kategori hasil clustering

# **Konversi nama makanan ke fitur numerik**
cv = TfidfVectorizer(max_features=10000, stop_words='english')
X_name = cv.fit_transform(new_data['name'].values.astype('U'))  # Ubah nama menjadi vektor

# Gunakan Naïve Bayes untuk rekomendasi makanan
model_recommendation = MultinomialNB()
y = np.arange(len(new_data))  # Gunakan indeks sebagai label untuk prediksi
model_recommendation.fit(X_name, y)  # Latih model dengan teks dari nama makanan/minuman

# **Fungsi untuk memprediksi kategori berdasarkan ingredients**
def predict_category(ingredients):
    query_vec = tfidf.transform([ingredients.lower()])  # Konversi input ke vektor numerik
    predicted_category = model_category.predict(query_vec)[0]  # Prediksi kategori makanan/minuman
    return predicted_category

# **Fungsi rekomendasi untuk menampilkan 5 hasil**
def recommend_nb(data):
    query_vec = cv.transform([data.lower()])  # Ubah input ke format vektor
    predicted_probs = model_recommendation.predict_proba(query_vec)[0]  # Dapatkan probabilitas tiap item
    top_5_indices = np.argsort(predicted_probs)[-5:][::-1]  # Ambil 5 teratas
    
    recommended_items = new_data.iloc[top_5_indices].copy()  # Ambil 5 item berdasarkan prediksi
    recommended_items['predicted_category'] = recommended_items['ingredients'].apply(predict_category)  # Tambahkan kategori yang diprediksi
    
    print("Rekomendasi untuk:", data)
    print(recommended_items[['id', 'name', 'ingredients', 'category', 'predicted_category', 'steps', 'image', 'rating']])

# **Tes rekomendasi dengan input**
target_item = "BURGER"
recommend_nb(target_item)
